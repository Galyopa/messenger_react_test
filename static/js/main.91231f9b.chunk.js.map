{"version":3,"sources":["app/hooks.ts","app/features/chats.ts","chats.js","utils/fetchClient.ts","components/SendMessageForm/SendMessageForm.tsx","api/answerFromChuk.ts","components/Messages/Messages.tsx","components/SearchField/SearchField.tsx","components/ChatsList/ChatsItem.tsx","components/ChatsList/ChatsList.tsx","App.tsx","app/LocalStorage.ts","app/app.ts","index.tsx"],"names":["useAppSelector","useSelector","chatsSlice","createSlice","name","initialState","userId","userImg","username","messageHistory","chatId","messageId","text","isAuthor","date","reducers","addMessageToHistory","state","action","currentChat","find","chat","payload","push","actions","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","SendMessageForm","dispatch","useDispatch","useState","textMessage","setTextMessage","className","onSubmit","event","preventDefault","trim","newMessage","uuidv4","Date","toString","re","Answer","value","htmlFor","autoComplete","type","id","placeholder","onChange","target","dateOptions","dateStyle","timeStyle","Messages","useParams","chatContent","chats","src","alt","map","messages","classNames","toLocaleString","SearchField","useSearchParams","searchParams","setSearchParams","query","get","getActiveClasses","status","isActive","ChatsItem","lastMessageIndex","length","to","width","height","ChatsList","visibleChats","sort","a","b","getTime","lowerQuery","toLocaleLowerCase","filter","message","join","includes","App","path","element","index","KEY","serializedState","localStorage","setItem","e","store","configureStore","devTools","reducer","chatsReducer","preloadedState","getItem","parse","loadState","subscribe","saveState","getState","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.91231f9b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './app';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport { chatsItems } from '../../chats';\n\nconst chatsSlice = createSlice({\n  name: 'chats',\n  initialState: chatsItems,\n  reducers: {\n    addMessageToHistory: (state, action: PayloadAction<Message>) => {\n      const currentChat = state.find(\n        chat => chat.userId === action.payload.chatId,\n      );\n\n      currentChat?.messageHistory.push(action.payload);\n    },\n  },\n});\n\nexport default chatsSlice.reducer;\nexport const { addMessageToHistory } = chatsSlice.actions;\n","/* eslint-disable max-len */\nexport const chatsItems = [\n  {\n    userId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37341',\n    userImg:\n        'https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80',\n    username: 'Alice Freeman',\n    messageHistory: [\n      {\n        chatId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37341',\n        messageId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37342',\n        text: 'yoy are the worst',\n        isAuthor: false,\n        date: 'Aug 17, 2022, 3:34:19 PM',\n      },\n      {\n        chatId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37341',\n        messageId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37343',\n        text: 'yes i know',\n        isAuthor: true,\n        date: 'Aug 17, 2022, 3:34:21 PM',\n      },\n    ],\n  },\n  {\n    userId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37140',\n    userImg:\n        'https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500',\n    username: 'Josefina',\n    messageHistory: [\n      {\n        chatId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37140',\n        messageId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37168',\n        text: 'We are losing money! Quick!',\n        isAuthor: false,\n        date: 'Aug 17, 2022, 3:34:21 PM',\n      },\n    ],\n  },\n  {\n    userId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37141',\n    userImg:\n        'https://upload.wikimedia.org/wikipedia/commons/7/76/Boris_Johnson_official_portrait_%28cropped%29.jpg',\n    username: 'Борис Джонсонюк',\n    messageHistory: [\n      {\n        chatId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37141',\n        messageId: 'a5c49ba2-494b-4fc9-95fb-71caaeb37154',\n        text: 'Добрий день, everebody!',\n        isAuthor: false,\n        date: 'Aug 17, 2022, 3:35:21 PM',\n      },\n    ],\n  },\n];\n","const BASE_URL = 'https://api.chucknorris.io/';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  // if we add methods PUT and POST\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see answer\n  return wait(1000)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\n// If we need to, we can add other methods\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { FC, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAppDispatch } from '../../app/hooks';\nimport { addMessageToHistory } from '../../app/features/chats';\nimport { getAnswer } from '../../api/answerFromChuk';\nimport './sendForm.scss';\n\ntype Props = {\n  chatId: string | undefined;\n};\n\nexport const SendMessageForm:FC<Props> = ({ chatId }) => {\n  const dispatch = useAppDispatch();\n\n  const [textMessage, setTextMessage] = useState('');\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (textMessage.trim() && chatId) {\n      const newMessage: Message = {\n        chatId,\n        messageId: uuidv4(),\n        text: textMessage.trim(),\n        isAuthor: true,\n        date: new Date().toString(),\n      };\n\n      dispatch(addMessageToHistory(newMessage));\n\n      getAnswer().then(re => {\n        const Answer: Message = {\n          chatId,\n          messageId: uuidv4(),\n          text: re.value,\n          isAuthor: false,\n          date: new Date().toString(),\n        };\n\n        dispatch(addMessageToHistory(Answer));\n      });\n    }\n\n    setTextMessage('');\n  };\n\n  return (\n    <form\n      className=\"sendForm\"\n      onSubmit={handleSubmit}\n    >\n      <label\n        className=\"sendForm__label\"\n        htmlFor=\"message\"\n      >\n        <input\n          className=\"sendForm__input\"\n          autoComplete=\"off\"\n          type=\"text\"\n          value={textMessage}\n          name=\"message\"\n          id=\"message\"\n          placeholder=\"Message\"\n          onChange={event => setTextMessage(event.target.value)}\n        />\n      </label>\n      <button\n        className=\"sendForm__button\"\n        type=\"submit\"\n      >\n        Send\n      </button>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\n\ninterface Answer {\n  icon_url: string,\n  id: string,\n  url: string,\n  value: string,\n}\n\nexport const getAnswer = () => {\n  return client.get<Answer>('jokes/random');\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppSelector } from '../../app/hooks';\nimport { SendMessageForm } from '../SendMessageForm';\nimport './messages.scss';\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  dateStyle: 'short',\n  timeStyle: 'medium',\n};\n\nexport const Messages: FC = () => {\n  const { userId } = useParams();\n  const chats = useAppSelector(state => state.chats);\n\n  const chatContent = chats.find((chat) => chat.userId === userId);\n\n  return (\n    <>\n      <div className=\"messages__top\">\n        <img\n          className=\"messages__img user-icon\"\n          src={chatContent?.userImg}\n          alt={chatContent?.username}\n        />\n        <p className=\"messages__username\">\n          {chatContent?.username}\n        </p>\n      </div>\n      <div className=\"messages__center\">\n        <ul className=\"messages__list\">\n          {chatContent?.messageHistory.map(messages => (\n            <li className=\"messages__item\" key={messages.messageId}>\n              <div className={classNames(\n                'messages__content',\n                { 'messages__content--author': messages.isAuthor },\n              )}\n              >\n                <p>{messages.text}</p>\n                <p className=\"messages__date\">\n                  {new Date(messages.date).toLocaleString('en-US', dateOptions)}\n                </p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"messages__bottom\">\n        <SendMessageForm chatId={userId} />\n      </div>\n    </>\n\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nexport const SearchField = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  return (\n    <label className=\"chats__label\">\n      <input\n        className=\"chats__search\"\n        value={query}\n        onChange={event => setSearchParams({ query: event.target.value })}\n        type=\"text\"\n        placeholder=\"Search\"\n      />\n    </label>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FC } from 'react';\n\ntype Status = { isActive: boolean };\n\nconst getActiveClasses = (status: Status) => classNames(\n  'chats__link',\n  { 'chats__link-active': status.isActive },\n);\n\nconst dateOptions: Intl.DateTimeFormatOptions = {\n  timeStyle: 'short',\n};\n\ntype Props = {\n  chat: Chat;\n};\n\nexport const ChatsItem: FC<Props> = ({ chat }) => {\n  const lastMessageIndex = chat.messageHistory.length - 1;\n  const date = new Date(chat.messageHistory[lastMessageIndex].date)\n    .toLocaleString('en-US', dateOptions);\n  const { text } = chat.messageHistory[lastMessageIndex];\n\n  return (\n    <li className=\"chats__item\" key={chat.userId}>\n      <NavLink\n        className={getActiveClasses}\n        to={chat.userId}\n      >\n        <div className=\"chats__img-wrapper\">\n          <img\n            className=\"chats__img user-icon\"\n            src={chat.userImg}\n            alt={chat.username}\n            width=\"50\"\n            height=\"50\"\n          />\n        </div>\n\n        <div className=\"chats__content\">\n          <h2 className=\"chats__username\">{chat.username}</h2>\n          <p className=\"chats__last-message\">\n            {\n              text\n            }\n          </p>\n          <span className=\"chats__date\">\n            { date }\n          </span>\n        </div>\n      </NavLink>\n    </li>\n  );\n};\n","import { FC } from 'react';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport { useAppSelector } from '../../app/hooks';\nimport { SearchField } from '../SearchField';\nimport { ChatsItem } from './ChatsItem';\nimport './chats.scss';\n\nexport const ChatsList: FC = () => {\n  const [searchParams] = useSearchParams();\n  const chats = useAppSelector(state => state.chats);\n\n  const query = searchParams.get('query');\n\n  let visibleChats = [...chats];\n\n  visibleChats.sort(\n    (\n      a: Chat,\n      b: Chat,\n    ) => new Date(b.messageHistory[b.messageHistory.length - 1].date).getTime()\n    - new Date(a.messageHistory[a.messageHistory.length - 1].date).getTime(),\n  );\n\n  if (query) {\n    const lowerQuery = query.toLocaleLowerCase();\n\n    visibleChats = chats.filter(chat => {\n      return [chat.username, chat.messageHistory.map(message => message.text)]\n        .join('\\n')\n        .toLocaleLowerCase()\n        .includes(lowerQuery);\n    });\n  }\n\n  return (\n    <main className=\"page__main\">\n      <div className=\"chats\">\n        <div className=\"chats__top\">\n          <img\n            className=\"chats__user-icon user-icon\"\n            // eslint-disable-next-line max-len\n            src=\"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=580&amp\"\n            alt=\"John Doe\"\n            width=\"50\"\n            height=\"50\"\n          />\n          <SearchField />\n        </div>\n        <div className=\"chats__bottom\">\n          <ul className=\"chats__list\">\n            {\n              visibleChats.map(chat => (\n                <ChatsItem chat={chat} />\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n      <div className=\"messages\">\n        <Outlet />\n      </div>\n    </main>\n  );\n};\n","import { FC } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Messages } from './components/Messages';\nimport { ChatsList } from './components/ChatsList';\n\nexport const App: FC = () => (\n  <div className=\"page__container\">\n    <Routes>\n      <Route path=\"/\" element={<ChatsList />}>\n        <Route\n          index\n          element={(\n            <div className=\"messages__empty\">\n              <p>Select a chat</p>\n            </div>\n          )}\n        />\n        <Route path=\":userId\" element={<Messages />} />\n      </Route>\n      <Route path=\"home\" element={<Navigate to=\"/\" />} />\n      <Route\n        path=\"*\"\n        element={<h1>Page not found</h1>}\n      />\n    </Routes>\n  </div>\n);\n","const KEY = 'redux';\n\nexport function loadState() {\n  try {\n    const serializedState = localStorage.getItem(KEY);\n\n    if (!serializedState) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport async function saveState(state: unknown) {\n  try {\n    const serializedState = JSON.stringify(state);\n\n    localStorage.setItem(KEY, serializedState);\n  } catch (e) {\n    // Ignore\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport chatsReducer from './features/chats';\nimport { loadState } from './LocalStorage';\n\nexport const store = configureStore({\n  devTools: true,\n  reducer: {\n    chats: chatsReducer,\n  },\n  preloadedState: loadState(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './app/app';\nimport { saveState } from './app/LocalStorage';\nimport './styles/reset.css';\nimport './styles/App.scss';\n\nstore.subscribe(\n  () => {\n    saveState(store.getState());\n  },\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}